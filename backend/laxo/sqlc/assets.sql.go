// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: assets.sql

package sqlc

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets (
  shop_id, murmur_hash, original_filename, extension,
  file_size, width, height
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, shop_id, murmur_hash, original_filename, extension, file_size, width, height, created
`

type CreateAssetParams struct {
	ShopID           string      `json:"shopID"`
	MurmurHash       string      `json:"murmurHash"`
	OriginalFilename null.String `json:"originalFilename"`
	Extension        null.String `json:"extension"`
	FileSize         null.Int    `json:"fileSize"`
	Width            null.Int    `json:"width"`
	Height           null.Int    `json:"height"`
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, createAsset,
		arg.ShopID,
		arg.MurmurHash,
		arg.OriginalFilename,
		arg.Extension,
		arg.FileSize,
		arg.Width,
		arg.Height,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.MurmurHash,
		&i.OriginalFilename,
		&i.Extension,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Created,
	)
	return i, err
}

const createLazadaLaxoAssetLink = `-- name: CreateLazadaLaxoAssetLink :one
INSERT INTO assets_lazada (
  asset_id, lazada_url
) VALUES (
  $1, $2
)
RETURNING asset_id, lazada_url, created
`

type CreateLazadaLaxoAssetLinkParams struct {
	AssetID   string      `json:"assetID"`
	LazadaUrl null.String `json:"lazadaUrl"`
}

func (q *Queries) CreateLazadaLaxoAssetLink(ctx context.Context, arg CreateLazadaLaxoAssetLinkParams) (AssetsLazada, error) {
	row := q.db.QueryRow(ctx, createLazadaLaxoAssetLink, arg.AssetID, arg.LazadaUrl)
	var i AssetsLazada
	err := row.Scan(&i.AssetID, &i.LazadaUrl, &i.Created)
	return i, err
}

const createProductMedia = `-- name: CreateProductMedia :one
INSERT INTO products_media (
  product_id, asset_id,
  image_order, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING product_id, asset_id, image_order, status
`

type CreateProductMediaParams struct {
	ProductID  string   `json:"productID"`
	AssetID    string   `json:"assetID"`
	ImageOrder null.Int `json:"imageOrder"`
	Status     string   `json:"status"`
}

func (q *Queries) CreateProductMedia(ctx context.Context, arg CreateProductMediaParams) (ProductsMedia, error) {
	row := q.db.QueryRow(ctx, createProductMedia,
		arg.ProductID,
		arg.AssetID,
		arg.ImageOrder,
		arg.Status,
	)
	var i ProductsMedia
	err := row.Scan(
		&i.ProductID,
		&i.AssetID,
		&i.ImageOrder,
		&i.Status,
	)
	return i, err
}

const deleteProductMedia = `-- name: DeleteProductMedia :exec
DELETE FROM products_media
WHERE product_id = $1 AND asset_id = $2
`

type DeleteProductMediaParams struct {
	ProductID string `json:"productID"`
	AssetID   string `json:"assetID"`
}

func (q *Queries) DeleteProductMedia(ctx context.Context, arg DeleteProductMediaParams) error {
	_, err := q.db.Exec(ctx, deleteProductMedia, arg.ProductID, arg.AssetID)
	return err
}

const getAllAssetsByShopID = `-- name: GetAllAssetsByShopID :many
SELECT
  c.count, p.id, p.shop_id, p.murmur_hash, p.original_filename, p.extension, p.file_size, p.width, p.height, p.created
FROM
(
  SELECT COUNT(*) AS COUNT
  FROM assets
  WHERE assets.shop_id = $1
) as c
LEFT JOIN (
  SELECT assets.id, assets.shop_id, assets.murmur_hash, assets.original_filename, assets.extension, assets.file_size, assets.width, assets.height, assets.created
  FROM assets
  ORDER BY assets.created
  LIMIT $2 OFFSET $3
) as p
ON true
`

type GetAllAssetsByShopIDParams struct {
	ShopID string `json:"shopID"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetAllAssetsByShopIDRow struct {
	Count            int64       `json:"count"`
	ID               string      `json:"id"`
	ShopID           string      `json:"shopID"`
	MurmurHash       string      `json:"murmurHash"`
	OriginalFilename null.String `json:"originalFilename"`
	Extension        null.String `json:"extension"`
	FileSize         null.Int    `json:"fileSize"`
	Width            null.Int    `json:"width"`
	Height           null.Int    `json:"height"`
	Created          null.Time   `json:"created"`
}

func (q *Queries) GetAllAssetsByShopID(ctx context.Context, arg GetAllAssetsByShopIDParams) ([]GetAllAssetsByShopIDRow, error) {
	rows, err := q.db.Query(ctx, getAllAssetsByShopID, arg.ShopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAssetsByShopIDRow
	for rows.Next() {
		var i GetAllAssetsByShopIDRow
		if err := rows.Scan(
			&i.Count,
			&i.ID,
			&i.ShopID,
			&i.MurmurHash,
			&i.OriginalFilename,
			&i.Extension,
			&i.FileSize,
			&i.Width,
			&i.Height,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssetByID = `-- name: GetAssetByID :one
SELECT id, shop_id, murmur_hash, original_filename, extension, file_size, width, height, created FROM assets
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAssetByID(ctx context.Context, id string) (Asset, error) {
	row := q.db.QueryRow(ctx, getAssetByID, id)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.MurmurHash,
		&i.OriginalFilename,
		&i.Extension,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Created,
	)
	return i, err
}

const getAssetByIDAndShopID = `-- name: GetAssetByIDAndShopID :one
SELECT id, shop_id, murmur_hash, original_filename, extension, file_size, width, height, created FROM assets
WHERE id = $1 AND shop_id = $2
LIMIT 1
`

type GetAssetByIDAndShopIDParams struct {
	ID     string `json:"id"`
	ShopID string `json:"shopID"`
}

func (q *Queries) GetAssetByIDAndShopID(ctx context.Context, arg GetAssetByIDAndShopIDParams) (Asset, error) {
	row := q.db.QueryRow(ctx, getAssetByIDAndShopID, arg.ID, arg.ShopID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.MurmurHash,
		&i.OriginalFilename,
		&i.Extension,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Created,
	)
	return i, err
}

const getAssetByMurmur = `-- name: GetAssetByMurmur :one
SELECT id, shop_id, murmur_hash, original_filename, extension, file_size, width, height, created FROM assets
WHERE murmur_hash = $1 AND shop_id = $2
LIMIT 1
`

type GetAssetByMurmurParams struct {
	MurmurHash string `json:"murmurHash"`
	ShopID     string `json:"shopID"`
}

func (q *Queries) GetAssetByMurmur(ctx context.Context, arg GetAssetByMurmurParams) (Asset, error) {
	row := q.db.QueryRow(ctx, getAssetByMurmur, arg.MurmurHash, arg.ShopID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.MurmurHash,
		&i.OriginalFilename,
		&i.Extension,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Created,
	)
	return i, err
}

const getAssetByOriginalName = `-- name: GetAssetByOriginalName :one
SELECT id, shop_id, murmur_hash, original_filename, extension, file_size, width, height, created FROM assets
WHERE original_filename = $1 AND shop_id = $2
LIMIT 1
`

type GetAssetByOriginalNameParams struct {
	OriginalFilename null.String `json:"originalFilename"`
	ShopID           string      `json:"shopID"`
}

func (q *Queries) GetAssetByOriginalName(ctx context.Context, arg GetAssetByOriginalNameParams) (Asset, error) {
	row := q.db.QueryRow(ctx, getAssetByOriginalName, arg.OriginalFilename, arg.ShopID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.MurmurHash,
		&i.OriginalFilename,
		&i.Extension,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Created,
	)
	return i, err
}

const getLazadaLaxoLinkByAssetIDAndShopID = `-- name: GetLazadaLaxoLinkByAssetIDAndShopID :one
SELECT assets_lazada.asset_id, assets_lazada.lazada_url, assets_lazada.created FROM assets
LEFT JOIN assets_lazada ON assets_lazada.asset_id = assets.id
WHERE assets.id = $1 AND assets.shop_id = $2
LIMIT 1
`

type GetLazadaLaxoLinkByAssetIDAndShopIDParams struct {
	ID     string `json:"id"`
	ShopID string `json:"shopID"`
}

type GetLazadaLaxoLinkByAssetIDAndShopIDRow struct {
	AssetID   null.String `json:"assetID"`
	LazadaUrl null.String `json:"lazadaUrl"`
	Created   null.Time   `json:"created"`
}

func (q *Queries) GetLazadaLaxoLinkByAssetIDAndShopID(ctx context.Context, arg GetLazadaLaxoLinkByAssetIDAndShopIDParams) (GetLazadaLaxoLinkByAssetIDAndShopIDRow, error) {
	row := q.db.QueryRow(ctx, getLazadaLaxoLinkByAssetIDAndShopID, arg.ID, arg.ShopID)
	var i GetLazadaLaxoLinkByAssetIDAndShopIDRow
	err := row.Scan(&i.AssetID, &i.LazadaUrl, &i.Created)
	return i, err
}

const getProductMedia = `-- name: GetProductMedia :one
SELECT product_id, asset_id, image_order, status FROM products_media
WHERE product_id = $1 AND asset_id = $2
`

type GetProductMediaParams struct {
	ProductID string `json:"productID"`
	AssetID   string `json:"assetID"`
}

func (q *Queries) GetProductMedia(ctx context.Context, arg GetProductMediaParams) (ProductsMedia, error) {
	row := q.db.QueryRow(ctx, getProductMedia, arg.ProductID, arg.AssetID)
	var i ProductsMedia
	err := row.Scan(
		&i.ProductID,
		&i.AssetID,
		&i.ImageOrder,
		&i.Status,
	)
	return i, err
}

const updateAsset = `-- name: UpdateAsset :one
UPDATE assets
SET
 shop_id = coalesce($1, shop_id),
 murmur_hash = coalesce($2, murmur_hash),
 original_filename = coalesce($3, original_filename),
 extension = coalesce($4, extension),
 file_size = coalesce($5, file_size),
 width = coalesce($6, width),
 height = coalesce($7, height)
WHERE id = $8
RETURNING id, shop_id, murmur_hash, original_filename, extension, file_size, width, height, created
`

type UpdateAssetParams struct {
	ShopID           null.String `json:"shopID"`
	MurmurHash       null.String `json:"murmurHash"`
	OriginalFilename null.String `json:"originalFilename"`
	Extension        null.String `json:"extension"`
	FileSize         null.Int    `json:"fileSize"`
	Width            null.Int    `json:"width"`
	Height           null.Int    `json:"height"`
	ID               string      `json:"id"`
}

func (q *Queries) UpdateAsset(ctx context.Context, arg UpdateAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, updateAsset,
		arg.ShopID,
		arg.MurmurHash,
		arg.OriginalFilename,
		arg.Extension,
		arg.FileSize,
		arg.Width,
		arg.Height,
		arg.ID,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.MurmurHash,
		&i.OriginalFilename,
		&i.Extension,
		&i.FileSize,
		&i.Width,
		&i.Height,
		&i.Created,
	)
	return i, err
}

const updateProductMedia = `-- name: UpdateProductMedia :one
UPDATE products_media
SET
 image_order = coalesce($1, image_order),
 status = coalesce($2, status)
WHERE product_id = $3 AND asset_id = $4
RETURNING product_id, asset_id, image_order, status
`

type UpdateProductMediaParams struct {
	ImageOrder null.Int    `json:"imageOrder"`
	Status     null.String `json:"status"`
	ProductID  string      `json:"productID"`
	AssetID    string      `json:"assetID"`
}

func (q *Queries) UpdateProductMedia(ctx context.Context, arg UpdateProductMediaParams) (ProductsMedia, error) {
	row := q.db.QueryRow(ctx, updateProductMedia,
		arg.ImageOrder,
		arg.Status,
		arg.ProductID,
		arg.AssetID,
	)
	var i ProductsMedia
	err := row.Scan(
		&i.ProductID,
		&i.AssetID,
		&i.ImageOrder,
		&i.Status,
	)
	return i, err
}
