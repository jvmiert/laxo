// Code generated by sqlc. DO NOT EDIT.
// source: platform_lazada.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createLazadaPlatform = `-- name: CreateLazadaPlatform :one
INSERT INTO platform_lazada (
  shop_id, access_token, country, refresh_token, account_platform, account,
  user_id_vn, seller_id_vn, short_code_vn, refresh_expires_in,
  access_expires_in
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, shop_id, access_token, country, refresh_token, account_platform, account, user_id_vn, seller_id_vn, short_code_vn, refresh_expires_in, access_expires_in, created
`

type CreateLazadaPlatformParams struct {
	ShopID           string       `json:"shopID"`
	AccessToken      string       `json:"accessToken"`
	Country          string       `json:"country"`
	RefreshToken     string       `json:"refreshToken"`
	AccountPlatform  string       `json:"accountPlatform"`
	Account          string       `json:"account"`
	UserIDVn         string       `json:"userIDVn"`
	SellerIDVn       string       `json:"sellerIDVn"`
	ShortCodeVn      string       `json:"shortCodeVn"`
	RefreshExpiresIn sql.NullTime `json:"refreshExpiresIn"`
	AccessExpiresIn  sql.NullTime `json:"accessExpiresIn"`
}

func (q *Queries) CreateLazadaPlatform(ctx context.Context, arg CreateLazadaPlatformParams) (PlatformLazada, error) {
	row := q.db.QueryRow(ctx, createLazadaPlatform,
		arg.ShopID,
		arg.AccessToken,
		arg.Country,
		arg.RefreshToken,
		arg.AccountPlatform,
		arg.Account,
		arg.UserIDVn,
		arg.SellerIDVn,
		arg.ShortCodeVn,
		arg.RefreshExpiresIn,
		arg.AccessExpiresIn,
	)
	var i PlatformLazada
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.AccessToken,
		&i.Country,
		&i.RefreshToken,
		&i.AccountPlatform,
		&i.Account,
		&i.UserIDVn,
		&i.SellerIDVn,
		&i.ShortCodeVn,
		&i.RefreshExpiresIn,
		&i.AccessExpiresIn,
		&i.Created,
	)
	return i, err
}

const getLazadaPlatformByShopID = `-- name: GetLazadaPlatformByShopID :one
SELECT id, shop_id, access_token, country, refresh_token, account_platform, account, user_id_vn, seller_id_vn, short_code_vn, refresh_expires_in, access_expires_in, created FROM platform_lazada
WHERE shop_id = $1
LIMIT 1
`

func (q *Queries) GetLazadaPlatformByShopID(ctx context.Context, shopID string) (PlatformLazada, error) {
	row := q.db.QueryRow(ctx, getLazadaPlatformByShopID, shopID)
	var i PlatformLazada
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.AccessToken,
		&i.Country,
		&i.RefreshToken,
		&i.AccountPlatform,
		&i.Account,
		&i.UserIDVn,
		&i.SellerIDVn,
		&i.ShortCodeVn,
		&i.RefreshExpiresIn,
		&i.AccessExpiresIn,
		&i.Created,
	)
	return i, err
}

const updateLazadaPlatform = `-- name: UpdateLazadaPlatform :exec
UPDATE platform_lazada SET shop_id = $1, access_token = $2, country = $3,
refresh_token = $4, account_platform = $5, account = $6, user_id_vn = $7,
seller_id_vn = $8, short_code_vn = $9, refresh_expires_in = $10,
access_expires_in = $11
WHERE id = $12
`

type UpdateLazadaPlatformParams struct {
	ShopID           string       `json:"shopID"`
	AccessToken      string       `json:"accessToken"`
	Country          string       `json:"country"`
	RefreshToken     string       `json:"refreshToken"`
	AccountPlatform  string       `json:"accountPlatform"`
	Account          string       `json:"account"`
	UserIDVn         string       `json:"userIDVn"`
	SellerIDVn       string       `json:"sellerIDVn"`
	ShortCodeVn      string       `json:"shortCodeVn"`
	RefreshExpiresIn sql.NullTime `json:"refreshExpiresIn"`
	AccessExpiresIn  sql.NullTime `json:"accessExpiresIn"`
	ID               string       `json:"id"`
}

func (q *Queries) UpdateLazadaPlatform(ctx context.Context, arg UpdateLazadaPlatformParams) error {
	_, err := q.db.Exec(ctx, updateLazadaPlatform,
		arg.ShopID,
		arg.AccessToken,
		arg.Country,
		arg.RefreshToken,
		arg.AccountPlatform,
		arg.Account,
		arg.UserIDVn,
		arg.SellerIDVn,
		arg.ShortCodeVn,
		arg.RefreshExpiresIn,
		arg.AccessExpiresIn,
		arg.ID,
	)
	return err
}
