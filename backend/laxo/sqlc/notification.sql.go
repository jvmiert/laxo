// Code generated by sqlc. DO NOT EDIT.
// source: notification.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
  notification_group_id, read, current_main_step,
  current_sub_step, main_message, sub_message
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, redis_id, notification_group_id, created, read, current_main_step, current_sub_step, main_message, sub_message
`

type CreateNotificationParams struct {
	NotificationGroupID string         `json:"notificationGroupID"`
	Read                sql.NullTime   `json:"read"`
	CurrentMainStep     sql.NullInt64  `json:"currentMainStep"`
	CurrentSubStep      sql.NullInt64  `json:"currentSubStep"`
	MainMessage         sql.NullString `json:"mainMessage"`
	SubMessage          sql.NullString `json:"subMessage"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.NotificationGroupID,
		arg.Read,
		arg.CurrentMainStep,
		arg.CurrentSubStep,
		arg.MainMessage,
		arg.SubMessage,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.RedisID,
		&i.NotificationGroupID,
		&i.Created,
		&i.Read,
		&i.CurrentMainStep,
		&i.CurrentSubStep,
		&i.MainMessage,
		&i.SubMessage,
	)
	return i, err
}

const createNotificationsGroup = `-- name: CreateNotificationsGroup :one
INSERT INTO notifications_group (
  user_id, workflow_id, entity_id, entity_type,
  total_main_steps, total_sub_steps
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, workflow_id, entity_id, entity_type, total_main_steps, total_sub_steps
`

type CreateNotificationsGroupParams struct {
	UserID         string         `json:"userID"`
	WorkflowID     sql.NullString `json:"workflowID"`
	EntityID       string         `json:"entityID"`
	EntityType     string         `json:"entityType"`
	TotalMainSteps sql.NullInt64  `json:"totalMainSteps"`
	TotalSubSteps  sql.NullInt64  `json:"totalSubSteps"`
}

func (q *Queries) CreateNotificationsGroup(ctx context.Context, arg CreateNotificationsGroupParams) (NotificationsGroup, error) {
	row := q.db.QueryRow(ctx, createNotificationsGroup,
		arg.UserID,
		arg.WorkflowID,
		arg.EntityID,
		arg.EntityType,
		arg.TotalMainSteps,
		arg.TotalSubSteps,
	)
	var i NotificationsGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkflowID,
		&i.EntityID,
		&i.EntityType,
		&i.TotalMainSteps,
		&i.TotalSubSteps,
	)
	return i, err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, redis_id, notification_group_id, created, read, current_main_step, current_sub_step, main_message, sub_message FROM notifications
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id string) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.RedisID,
		&i.NotificationGroupID,
		&i.Created,
		&i.Read,
		&i.CurrentMainStep,
		&i.CurrentSubStep,
		&i.MainMessage,
		&i.SubMessage,
	)
	return i, err
}

const getNotificationsGroupByID = `-- name: GetNotificationsGroupByID :one
SELECT id, user_id, workflow_id, entity_id, entity_type, total_main_steps, total_sub_steps FROM notifications_group
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNotificationsGroupByID(ctx context.Context, id string) (NotificationsGroup, error) {
	row := q.db.QueryRow(ctx, getNotificationsGroupByID, id)
	var i NotificationsGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkflowID,
		&i.EntityID,
		&i.EntityType,
		&i.TotalMainSteps,
		&i.TotalSubSteps,
	)
	return i, err
}

const getNotificationsGroupByWorkflowID = `-- name: GetNotificationsGroupByWorkflowID :one
SELECT id, user_id, workflow_id, entity_id, entity_type, total_main_steps, total_sub_steps FROM notifications_group
WHERE workflow_id = $1 AND user_id = $2
LIMIT 1
`

type GetNotificationsGroupByWorkflowIDParams struct {
	WorkflowID sql.NullString `json:"workflowID"`
	UserID     string         `json:"userID"`
}

func (q *Queries) GetNotificationsGroupByWorkflowID(ctx context.Context, arg GetNotificationsGroupByWorkflowIDParams) (NotificationsGroup, error) {
	row := q.db.QueryRow(ctx, getNotificationsGroupByWorkflowID, arg.WorkflowID, arg.UserID)
	var i NotificationsGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkflowID,
		&i.EntityID,
		&i.EntityType,
		&i.TotalMainSteps,
		&i.TotalSubSteps,
	)
	return i, err
}

const updateNotificationGroup = `-- name: UpdateNotificationGroup :one
UPDATE notifications_group SET
  user_id = CASE WHEN $1::boolean
    THEN $2::CHAR(26) ELSE user_id END,

  workflow_id = CASE WHEN $3::boolean
    THEN $4::CHAR(64) ELSE workflow_id END,

  entity_id = CASE WHEN $5::boolean
    THEN $6::CHAR(64) ELSE entity_id END,

  entity_type = CASE WHEN $7::boolean
    THEN $8::CHAR(64) ELSE entity_type END,

  total_main_steps = CASE WHEN $9::boolean
    THEN $10::BIGINT ELSE total_main_steps END,

  total_sub_steps = CASE WHEN $11::boolean
    THEN $12::BIGINT ELSE total_sub_steps END

WHERE id = $13
RETURNING id, user_id, workflow_id, entity_id, entity_type, total_main_steps, total_sub_steps
`

type UpdateNotificationGroupParams struct {
	UserIDDoUpdate         bool   `json:"userIDDoUpdate"`
	UserID                 string `json:"userID"`
	WorkflowIDDoUpdate     bool   `json:"workflowIDDoUpdate"`
	WorkflowID             string `json:"workflowID"`
	EntityIDDoUpdate       bool   `json:"entityIDDoUpdate"`
	EntityID               string `json:"entityID"`
	EntityTypeDoUpdate     bool   `json:"entityTypeDoUpdate"`
	EntityType             string `json:"entityType"`
	TotalMainStepsDoUpdate bool   `json:"totalMainStepsDoUpdate"`
	TotalMainSteps         int64  `json:"totalMainSteps"`
	TotalSubStepsDoUpdate  bool   `json:"totalSubStepsDoUpdate"`
	TotalSubSteps          int64  `json:"totalSubSteps"`
	ID                     string `json:"id"`
}

func (q *Queries) UpdateNotificationGroup(ctx context.Context, arg UpdateNotificationGroupParams) (NotificationsGroup, error) {
	row := q.db.QueryRow(ctx, updateNotificationGroup,
		arg.UserIDDoUpdate,
		arg.UserID,
		arg.WorkflowIDDoUpdate,
		arg.WorkflowID,
		arg.EntityIDDoUpdate,
		arg.EntityID,
		arg.EntityTypeDoUpdate,
		arg.EntityType,
		arg.TotalMainStepsDoUpdate,
		arg.TotalMainSteps,
		arg.TotalSubStepsDoUpdate,
		arg.TotalSubSteps,
		arg.ID,
	)
	var i NotificationsGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkflowID,
		&i.EntityID,
		&i.EntityType,
		&i.TotalMainSteps,
		&i.TotalSubSteps,
	)
	return i, err
}

const updateRedisIDByNotificationID = `-- name: UpdateRedisIDByNotificationID :exec
UPDATE notifications SET
  redis_id = $1
WHERE id = $2
`

type UpdateRedisIDByNotificationIDParams struct {
	RedisID sql.NullString `json:"redisID"`
	ID      string         `json:"id"`
}

func (q *Queries) UpdateRedisIDByNotificationID(ctx context.Context, arg UpdateRedisIDByNotificationIDParams) error {
	_, err := q.db.Exec(ctx, updateRedisIDByNotificationID, arg.RedisID, arg.ID)
	return err
}
