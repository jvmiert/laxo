// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: product.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateFrame(ctx context.Context, in *CreateFrameRequest, opts ...grpc.CallOption) (ProductService_CreateFrameClient, error)
	GetProductRetrieveUpdate(ctx context.Context, in *ProductRetrieveUpdateRequest, opts ...grpc.CallOption) (ProductService_GetProductRetrieveUpdateClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateFrame(ctx context.Context, in *CreateFrameRequest, opts ...grpc.CallOption) (ProductService_CreateFrameClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], "/product.ProductService/CreateFrame", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceCreateFrameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_CreateFrameClient interface {
	Recv() (*CreateFrameReply, error)
	grpc.ClientStream
}

type productServiceCreateFrameClient struct {
	grpc.ClientStream
}

func (x *productServiceCreateFrameClient) Recv() (*CreateFrameReply, error) {
	m := new(CreateFrameReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) GetProductRetrieveUpdate(ctx context.Context, in *ProductRetrieveUpdateRequest, opts ...grpc.CallOption) (ProductService_GetProductRetrieveUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], "/product.ProductService/GetProductRetrieveUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetProductRetrieveUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_GetProductRetrieveUpdateClient interface {
	Recv() (*ProductRetrieveUpdateReply, error)
	grpc.ClientStream
}

type productServiceGetProductRetrieveUpdateClient struct {
	grpc.ClientStream
}

func (x *productServiceGetProductRetrieveUpdateClient) Recv() (*ProductRetrieveUpdateReply, error) {
	m := new(ProductRetrieveUpdateReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	CreateFrame(*CreateFrameRequest, ProductService_CreateFrameServer) error
	GetProductRetrieveUpdate(*ProductRetrieveUpdateRequest, ProductService_GetProductRetrieveUpdateServer) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) CreateFrame(*CreateFrameRequest, ProductService_CreateFrameServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateFrame not implemented")
}
func (UnimplementedProductServiceServer) GetProductRetrieveUpdate(*ProductRetrieveUpdateRequest, ProductService_GetProductRetrieveUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProductRetrieveUpdate not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateFrameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).CreateFrame(m, &productServiceCreateFrameServer{stream})
}

type ProductService_CreateFrameServer interface {
	Send(*CreateFrameReply) error
	grpc.ServerStream
}

type productServiceCreateFrameServer struct {
	grpc.ServerStream
}

func (x *productServiceCreateFrameServer) Send(m *CreateFrameReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductService_GetProductRetrieveUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRetrieveUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetProductRetrieveUpdate(m, &productServiceGetProductRetrieveUpdateServer{stream})
}

type ProductService_GetProductRetrieveUpdateServer interface {
	Send(*ProductRetrieveUpdateReply) error
	grpc.ServerStream
}

type productServiceGetProductRetrieveUpdateServer struct {
	grpc.ServerStream
}

func (x *productServiceGetProductRetrieveUpdateServer) Send(m *ProductRetrieveUpdateReply) error {
	return x.ServerStream.SendMsg(m)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFrame",
			Handler:       _ProductService_CreateFrame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProductRetrieveUpdate",
			Handler:       _ProductService_GetProductRetrieveUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}
